fnc int8 [
    int maxlimit : 99999999
    if arg2 > maxlimit [
        showln " Error: use an lower than 99999999. you used more than 99999999 "
        showln \n
    ]
    if arg2 << maxlimit [
        string defint : int
        tostring arg2
        join defint arg1 joined
        string a : :
        join joined a joined
        join joined arg2 final
        run final
    ]
]

fnc int5 [
    int maxlimit : 99999
    if arg2 > maxlimit [
        showln " Error: use a value lower than 99999999. you used: "
        showln \spc
        showln arg2
        showln \n
    ]
    if arg2 << maxlimit [
        string defint : int
        tostring arg2
        join defint arg1 joined
        string a : :
        join joined a joined
        join joined arg2 final
        run final
    ]
]

fnc int10 [
    int maxlimit : 9999999999
    if arg2 > maxlimit [
        showln " Error: use a value lower than 9999999999. you used: "
        showln \spc
        showln arg2
        showln \n
    ]
    if arg2 << maxlimit [
        string defint : int
        tostring arg2
        join defint arg1 joined
        string a : :
        join joined a joined
        join joined arg2 final
        run final
    ]
]

fnc int15 [
    int maxlimit : 999999999999999
    if arg2 > maxlimit [
        showln " Error: use a value lower than 999999999999999. you used: "
        showln \spc
        showln arg2
        showln \n
    ]
    if arg2 << maxlimit [
        string defint : int
        tostring arg2
        join defint arg1 joined
        string a : :
        join joined a joined
        join joined arg2 final
        run final
    ]
]

fnc ErrorInvalid [
    showln " Error: Invalid item named ' "
    showln \spc
    showln arg1
    showln " '. Use: "
    showln \spc
    showln arg2
    showln \n
]

fnc ErrorIncorrect [
    showln " Error: Incorrect thing in something! this is causing the 'incorrect' error: ' "
    showln \spc
    showln arg1
    showln " '. Use: "
    showln \spc
    showln arg2
    showln \n
]

fnc ErrorIllegalToken [
    showln " Error: Illegal token: ' "
    showln \spc
    showln arg1
    showln " '. Use: "
    showln \spc
    showln arg2
    showln \n
]

fnc ErrorGreaterThan [
    showln " Error: Your number is so much big and it's greater than "
    showln \spc
    showln arg1
    showln \spc
    showln " limit "
    showln " . Use a number lower than "
    showln \spc
    showln arg2
    showln " ! "
    showln \n
]

fnc ErrorLowerThan [
    showln " Error: Your number is so much big and it's lower than "
    showln \spc
    showln arg1
    showln \spc
    showln " limit "
    showln " . Use a number greater than "
    showln \spc
    showln arg2
    showln " ! "
    showln \n
]

fnc ErrorInvallidType [
    showln " Error: Invallid type. Use type: "
    showln \spc
    showln arg1
    showln \n
]

fnc showInt [
    string typecheck : int
    if arg1 isa typecheck [
        showln arg1
    ]
    if arg1 isnota typecheck [
        call ErrorInvallidType typecheck
    ]
]

fnc showFloat [
    string typecheck : float
    if arg1 isa typecheck [
        showln arg1
    ]
    if arg1 isnota typecheck [
        call ErrorInvallidType typecheck
    ]
]

fnc showString [
    string typecheck : string
    if arg1 isa typecheck [
        showln arg1
    ]
    if arg1 isnota typecheck [
        call ErrorInvallidType typecheck
    ]
]

fnc showList [
    string typecheck : list
    if arg1 isa typecheck [
        showln arg1
    ]
    if arg1 isnota typecheck [
        call ErrorInvallidType typecheck
    ]
]

fnc main [
    param int8 arg1 arg1
    param int8 arg2 arg2

    param int5 arg1 arg1
    param int5 arg2 arg2

    param int10 arg1 arg1
    param int10 arg2 arg2

    param int15 arg1 arg1
    param int15 arg2 arg2

    param ErrorInvalid arg1 arg1
    param ErrorInvalid arg2 arg2

    param ErrorIncorrect arg1 arg1
    param ErrorIncorrect arg2 arg2

    param ErrorIllegalToken arg1 arg1
    param ErrorIllegalToken arg2 arg2

    param ErrorGreaterThan arg1 arg1
    param ErrorGreaterThan arg2 arg2

    param ErrorLowerThan arg1 arg1
    param ErrorLowerThan arg2 arg2

    param ErrorInvallidType arg1 arg1

    param showInt arg1 arg1

    param showFloat arg1 arg1

    param showString arg1 arg1
    
    param showList arg1 arg1
]
