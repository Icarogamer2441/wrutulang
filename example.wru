&& this is a comment!
&& you can use coments inside and outside of an function
&& you can use "import filename" to import an file (dont use .wru in the final of the file name)
&& you can use "libimport filename" to import an file as an lib (dont use .wru in the final of the file name). you need to have an dir named "wrutulibs" in some directory or in the same directory (is recomended that you use in "/home/youruser/wrutulibs/" in linux, or "C:/Users/Youruser/wrutulibs/" in windows, but you can use in other directory)

fnc test [
    int n2 : 10
    if n1 = n2 [
        showln " you can use '=' or '!' or '>>' or '<<' or '>' or '<' or 'starts' or 'ends' or 'notstarts' or 'notends' "
        showln \n
    ]
    && the variable n1 has been defined in main function
]

fnc checkIsTrue [
    if isTrue [
        showln " it's evrything okay! "
        showln \n
    ]
]

fnc repeat [
    int checknum : 10
    int num : 0
    int incnum : 1
    while [
        mod num < incnum
        if num > checknum [
            stop
        ]
        showln " IM IN A WHILE LOOP! "
        showln \n
    ]
]

fnc test2 [
    int n4 : 5
    if n4 ! n3 [
        showln " It's not equal! "
        showln \n
    ]
    && the variable n3 has been defined in main function
]

fnc main [
    int n1 : 10
    showln " Hello world! "
    showln \n
    showln " n1 value is: "
    showln \spc
    showln n1
    showln \n
    call test
    bool isTrue : ok
    showln isTrue
    showln \n
    bool isTrue : no
    showln isTrue
    showln \n
    bool isTrue : ok
    call checkIsTrue
    call repeat
    showln " you can use 'input type varname' to create an input. types: int, string "
    showln \n
    string msg : I'm an string
    showln msg
    showln \n
    float fn1 : 2.5
    showln fn1
    showln \n
    showln " you can use 'rand varname num outputvar' or 'rand varname varname outputvar' or 'rand num num outputvar' or 'rand num varname outputvar' "
    showln \n
    list mylist
    listapp mylist fn1
    showln mylist
    showln \n
    split msg mysplit
    showln mysplit
    showln \n
    getlistitem mysplit 0 > msg2
    showln msg2
    showln \n
    showln " in 'getlistitem' you can use: 'getlistitem listvarname varname > outputvarname' or 'getlistitem listvarname num > outputvarname' "
    showln \n
    listpop  mysplit
    showln " use 11 or more to exit the loop "
    showln \n
    int numm : 11
    showln " Say an message > "
    showln \spc
    input string msg
    && you can use "input int outputvarname" too!
    showln msg
    showln \n
    && you can use 'file ftype filename' to interact with files. example with all things you can do with it: read: "file read myfile.txt mycontentvar". write: "file write myfile.txt mywritecontentvar". append: "file append myfile.txt myappendcontentvar"
    listchar msg2 msg2chars
    showln msg2chars
    showln \n
    string teststr : hello;my;friend!
    splitchar teststr ; splitedaaa
    && you can use "splitchar varname \n outputvar" too
    showln splitedaaa
    showln \n
    && in this language, have an variable named "spc" that have a space has it value
    && you can use "join varname1 varname2 outputvarname" to join the value of two vars with space in it
    && "join2 varname1 varname2 outputvarname" joins the value of two vars with no space in it
    && you can use "filenl filevarname" to add newline in a file
    && you can use "param funcname paramname paramvarname" (paramvarname is an name to an unexistent variable to create to use in an function)
    && if you made an param to an function. ex: "param myfunc param1 n1" and you want to call the function with this param, you can use: "call myfunc varname" (varname is the name of an existent variable to be the value of the variable param)
    param test2 myparam n3
    int number3 : 10
    call test2 number3
    && you can use "syscmd varname" to run a command from your OS
    && an variable with the name "nl" already exists to you use with joinlist if you want to make an join to add new line to an list or string
    joinlist splitedaaa nl notsplitedaaa
    && "joinlist varname splititemvarname outputvarname"
    showln notsplitedaaa
    showln \n
    rand 1 10 numbaaa
    showln numbaaa
    showln \n
    string myrunscript : showln " im running in an 'run' function! "
    run myrunscript
    showln \n
    && you can use "toint varname" to convert the value of the variable to integer. you can use "tofloat", "tobool" and "tostring" too!
    continuein 2
    showln " I runned after 2 seconds! "
    showln \n
    int waittime : 2
    continuein waittime
    showln " I runned after 2 seconds and i used an variable! "
    showln \n
    string verifytype : string
    && you can use "string", "float", "int" and "list"
    if waittime isa verifytype [
        showln " waittime variable is an string! "
        showln \n
    ]
    if waittime isnota verifytype [
        showln " waittime variable is not an string! "
        showln \n
    ]
    list2 mylist2
    string myitemname : item1
    string myitemvalue : hello!
    list2app mylist2 myitemname myitemvalue
    showln mylist2
    showln \n
    getlist2item mylist2 myitemname > myitemnamevalue
    showln myitemnamevalue
    showln \n
    list2pop mylist2
    showln mylist2
    showln \n
]
